ARG PROJECT_PUBLIC_PATH
ARG PHP_VERSION
ARG NODEJS_VERSION

FROM ${PHP_VERSION}

ARG PROJECT_PUBLIC_PATH
ARG PHP_VERSION
ARG NODEJS_VERSION

ENV PROJECT_PUBLIC_PATH $PROJECT_PUBLIC_PATH
ENV PHP_VERSION $PHP_VERSION
ENV NODEJS_VERSION $NODEJS_VERSION

WORKDIR /var/www/html

# RUN groupadd --gid 1000 project
# RUN useradd --uid 1000 --gid project --shell /bin/bash --create-home project
# RUN usermod -u ${USER_ID} www-data && groupmod -g ${GROUP_ID} www-data
# RUN chown -R www-data:www-data ../uploads
# RUN groupadd --gid 1000 www-data && \
#     usermod -u 1000 -g 1000 www-data && \
#     usermod --shell /bin/bash www-data && \
#     usermod -d /var/www/html www-data
#     usermod --create-home /var/www/html

RUN groupmod -g 1000 www-data && \
    usermod -u 1000 -g 1000 www-data &&\
    usermod --shell /bin/bash www-data && \
    usermod -d /var/www/html www-data

# Установка программ и утилит
RUN apt-get update && apt-get install -y \
    sudo \
    curl \
    wget \
    g++ \
    git \
    libbz2-dev \
    libfreetype6-dev \
    libicu-dev \
    libjpeg-dev \
    libmcrypt-dev \
    libpng-dev \
    libreadline-dev \
    libjpeg62-turbo-dev \
    libfreetype6-dev \
    jpegoptim optipng pngquant gifsicle \
    libc-client-dev  \
    libkrb5-dev \
    zlib1g-dev \
    libzip-dev \
    zip \
    unzip \
    supervisor \
 && rm -rf /var/lib/apt/lists/*

# https://www.marco.zone/official-docker-php-apache-https
RUN openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/ssl-cert-snakeoil.key -out /etc/ssl/certs/ssl-cert-snakeoil.pem -subj "/C=AT/ST=Vienna/L=Vienna/O=Security/OU=Development/CN=example.com"
RUN a2enmod rewrite
RUN a2ensite default-ssl
RUN a2enmod ssl

RUN apt-get update
RUN apt-get -y upgrade

ENV NODEJS_VERSION_URL=https://deb.nodesource.com/setup_${NODEJS_VERSION}.x

RUN echo $NODEJS_VERSION
RUN echo $NODEJS_VERSION_URL

RUN curl -sL "$NODEJS_VERSION_URL" | sudo bash -
RUN apt-get --yes --force-yes install nodejs

# Install gulp & bower
RUN npm install --global electron-forge
RUN npm install --global gulp
RUN npm install --global grunt
RUN npm install --global bower
RUN npm install --global less

RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Устанавливаем путь к обработке папки "public"
RUN sed -ri -e 's!/var/www/html!/var/www/html/${PROJECT_PUBLIC_PATH}!g' /etc/apache2/sites-available/*.conf
RUN sed -ri -e 's!/var/www/html!/var/www/html/${PROJECT_PUBLIC_PATH}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf

RUN a2enmod rewrite headers
RUN mv "$PHP_INI_DIR/php.ini-development" "$PHP_INI_DIR/php.ini" || true

# Установка расширений PHP
# RUN docker-php-ext-install gd
# RUN docker-php-ext-install bz2

RUN docker-php-ext-configure imap --with-kerberos --with-imap-ssl
RUN docker-php-ext-install imap

RUN docker-php-ext-install intl
RUN docker-php-ext-install iconv
RUN docker-php-ext-install opcache
RUN docker-php-ext-install bcmath
RUN docker-php-ext-install mysqli pdo pdo_mysql
RUN apt-get install -y libpq-dev \
    && docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql \
    && docker-php-ext-install pdo pdo_pgsql pgsql
RUN docker-php-ext-install zip

# RUN docker-php-ext-install mbstring
# RUN docker-php-ext-enable imap
# RUN docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/

# COPY --from=composer:latest /usr/bin/composer /usr/bin/composer
# ARG uid
# RUN useradd -G www-data,root -u $uid -d /home/devuser devuser
# RUN mkdir -p /home/devuser/.composer && \
#    chown -R devuser:devuser /home/devuser

# Set storage to writable
# COPY . /var/www/html/
# RUN chmod -R 777 storage/
